{"version":3,"sources":["components/PrettyJson.js","components/EventPanel.js","App.js","serviceWorker.js","index.js"],"names":["PrettyJson","json","jsonString","JSON","stringify","language","MAIN_TEMPLATE","id","req","method","url","reqWithContext","context","console","log","_req","Object","keys","forEach","key","value","value_result","replace","match","context_path","obj","split","reduce","object","property","valueWithContext","EventPanel","props","executeEvents","a","executeEvent","event","history","state","responses","acc","cur","response","request","newEvent","parse","addHistoryEventRequest","axios","res","addHistoryEventResponse","data","events","getEvents","eventsArray","evt","then","Promise","resolve","e","error","events_template","this","setEvents","setState","concat","original","prevHistory","lastEvent","pop","onChange","currentEvents","onClick","clear","React","Component","EventReqDisplay","eventHistory","className","style","float","width","EventsHistory","map","ev","idx","JsonEditor","window","valueString","mode","theme","name","Math","random","editorProps","$blockScrolling","height","App","href","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4QAmBeA,EAdI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACfC,EAA+B,kBAAVD,EACxBA,EACAE,KAAKC,UAAUH,EAAM,KAAM,MAE9B,OACC,kBAAC,IAAD,CACCI,SAAS,QAERH,I,kCCNEI,G,cAAgB,CACrB,CACCC,GAAI,YACJC,IAAK,CACJC,OAAQ,MACRC,IAAK,yEAGP,CACCH,GAAG,YACHC,IAAK,CACJC,OAAQ,MACRC,IAAI,yEAMDC,EAAiB,SAACH,EAAKI,GAE5BC,QAAQC,IAAI,UAAWF,GAYvB,IAUMG,EAAI,eAAQP,GAMlB,OALAQ,OAAOC,KAAKF,GACVG,SAAQ,SAACC,GACT,IAAMC,EAAQL,EAAKI,GACnBJ,EAAKI,GAdkB,SAACC,EAAOR,GAEhC,IAAMS,EAAeD,EAAME,QAAQ,cAAc,SAAUC,EAAOC,GAEjE,OADAX,QAAQC,IAAR,0BAAuC,CAACS,QAAOC,eAAcZ,YAbhCa,EAcKb,EAAdY,EAbNE,MAAM,KACnBC,QAAO,SAAUC,EAAQC,GACzB,GAAKD,EAEL,OAAOA,EAAOC,KACZJ,GANL,IAA+BA,KAiB9B,OADAZ,QAAQC,IAAR,mBAAgC,CAACM,QAAOC,iBACjCA,EAOMS,CAAiBV,EAAOR,MAE/BG,GAKFgB,E,kDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAePC,cAhBmB,sBAgBH,gCAAAC,EAAA,sDAETC,EAFS,+BAAAD,EAAA,MAEM,WAAOE,GAAP,qBAAAF,EAAA,6DAGZG,EAAU,EAAKC,MAAMD,QACrBzB,EAAU,CACf2B,UAAWF,EAAQV,QAAO,SAACa,EAAKC,GAI/B,OAHIA,EAAIC,WACPF,EAAIC,EAAIE,QAAQpC,IAAMkC,EAAIC,UAEpBF,IACL,KAEEI,EAAWzC,KAAK0C,MAAM1C,KAAKC,UAAUgC,IAC3CvB,QAAQC,IAAR,kBAA+B8B,GAE/BA,EAASpC,IAAMG,EAAeiC,EAASpC,IAAKI,GAE5C,EAAKkC,uBAAuBV,EAAOQ,GAEnC/B,QAAQC,IAAR,WAAwB8B,GAnBN,mBAsBAG,IAAMH,EAASpC,KAtBf,QAsBbwC,EAtBa,OAuBjB,EAAKC,wBAAwBD,EAAIE,MAvBhB,kDAyBjBrC,QAAQC,IAAR,YAzBiB,0DAFN,sDAqCTqC,EAAS,EAAKC,UAAU,EAAKd,OACnC,IACCzB,QAAQC,IAAI,kBAAmBqC,SAAeA,GACxCE,EAAclD,KAAK0C,MAAMM,GAC/BtC,QAAQC,IAAI,iBAAkBuC,SAAoBA,GAGlDA,EAAY1B,QAAO,SAACa,EAAKc,GACxB,OAAOd,EAAIe,MAAK,kBAAMpB,EAAamB,QAEjCE,QAAQC,WACV,MAAOC,GACR7C,QAAQ8C,MAAMD,GAjDA,2CAdf,EAAKpB,MAAQ,CACZa,OAAQ,GACRd,QAAS,IAJQ,E,gEASlB,IAAMuB,EAAkBtD,EAGxBuD,KAAKC,UAAU3D,KAAKC,UAAUwD,EAAiB,KAAM,S,gCA4D5CT,GACTU,KAAKE,SAAS,CAAEZ,a,kCAGhB,OAAOU,KAAKvB,MAAMa,S,6CAGIf,EAAOQ,GAC7BiB,KAAKE,SAAS,CACb1B,QAASwB,KAAKvB,MAAMD,QAAQ2B,OAAO,CAClCC,SAAU7B,EACVO,QAASC,EACTF,SAAU,W,8CAIWA,GACvB,IAAMwB,EAAW,YAAOL,KAAKvB,MAAMD,SAC7B8B,EAAYD,EAAYE,MAC9BD,EAAUzB,SAAWA,EACrBmB,KAAKE,SAAS,CACb1B,QAAS6B,EAAYF,OAAOG,O,8BAK7BN,KAAKE,SAAS,CAAE1B,QAAS,O,+BAEhB,IAAD,OACFA,EAAUwB,KAAKvB,MAAMD,QAE3B,OACC,6BACC,kBAAC,EAAD,CACCjB,MAAOyC,KAAKvB,MAAMa,OAClBkB,SAAU,SAAAC,GACT,EAAKR,UAAUQ,MAIjB,4BAAQC,QAAS,kBAAM,EAAKtC,kBAA5B,kBACA,4BAAQsC,QAAS,kBAAM,EAAKC,UAA5B,SACA,kBAAC,EAAD,CAAenC,QAASA,S,GAnHHoC,IAAMC,WA0HzBC,EAAkB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAClBX,EAAgCW,EAAhCX,SAAUtB,EAAsBiC,EAAtBjC,QAASD,EAAakC,EAAblC,SAE3B,OAAQ,6BACP,yBAAKmC,UAAU,UAAUC,MAAO,CAAEC,MAAO,OAAQC,MAAO,QACtDf,GAAY,kBAAC,EAAD,CAAYhE,KAAMgE,KAEhC,yBAAKY,UAAU,YAAYC,MAAO,CAAEC,MAAO,OAAQC,MAAO,QACxDrC,GAAW,kBAAC,EAAD,CAAY1C,KAAM0C,KAE/B,yBAAKkC,UAAU,WAAWC,MAAO,CAAEC,MAAO,OAAQC,MAAO,QACvDtC,GAAY,kBAAC,EAAD,CAAYzC,KAAMyC,KAEhC,yBAAKoC,MAAO,CAAEN,MAAO,YAIjBS,EAAgB,SAAC,GAAsB,IAAD,IAAnB5C,eAAmB,MAAT,GAAS,EAC3C,OACC,6BACEA,EAAQ6C,KAAI,SAACC,EAAIC,GACjB,OAAQ,yBAAKjE,IAAKiE,GACjB,kBAAC,EAAD,CAAiBR,aAAcO,UAQ9BE,EAAa,SAAC,GAAgC,IAAD,IAA7BjE,aAA6B,MAArB,KAAqB,EAAfiD,EAAe,EAAfA,SACnC,GAAsB,qBAAXiB,OAAwB,CAClC,IAAMC,EAA+B,kBAAVnE,EAAqBA,EAAQjB,KAAKC,UAAUgB,EAAO,KAAM,MACpF,OACC,8BACC,kBAAC,IAAD,CACCoE,KAAK,OACLC,MAAM,SACNC,KAAMC,KAAKC,SAAW,GACtBC,YAAa,CAAEC,iBAAiB,GAChCC,OAAO,QACPf,MAAM,SACN5D,MAAOmE,EACPlB,SAAUA,KAMd,OAAO,MAIOtC,I,OCnNAiE,MArBf,WACE,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cAChB,8CAIF,yBAAKA,UAAU,eACb,uBAAGA,UAAU,aAAb,mEACkE,6BADlE,uCAEsC,iCAFtC,IAEgD,6BAFhD,mCAGkC,kCAHlC,yBAGkE,uBAAGoB,KAAK,iDAAR,gBAHlE,IAG2I,6BAH3I,wEAIwE,OAJxE,iCAI6G,+CAJ7G,MAIuI,8BAEvI,kBAAC,EAAD,SCPYC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAAS7E,MACvB,2DCZN8E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACL9C,QAAQ8C,MAAMA,EAAMqD,a","file":"static/js/main.251b3e28.chunk.js","sourcesContent":["import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n// import { github } from 'react-syntax-highlighter/styles/hljs/github';\n\n\nconst PrettyJson = ({ json }) => {\n\tconst jsonString = typeof (json) === 'string'\n\t\t? json\n\t\t: JSON.stringify(json, null, \"  \")\n\n\treturn (\n\t\t<SyntaxHighlighter\n\t\t\tlanguage='json'\n\t\t>\n\t\t\t{jsonString}\n\t\t</SyntaxHighlighter>\n\t)\n}\n\nexport default PrettyJson;","import React from 'react';\nimport PrettyJson from './PrettyJson'\nimport axios from 'axios'\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\nconst MAIN_TEMPLATE = [\n\t{\n\t\tid: \"CAT_FACTS\",\n\t\treq: {\n\t\t\tmethod: \"get\",\n\t\t\turl: \"https://cat-fact.herokuapp.com/facts/random?animal_type=cat&amount=2\",\n\t\t}\n\t},\n\t{\n\t\tid:\"FIRST_CAT\",\n\t\treq: {\n\t\t\tmethod: \"get\",\n\t\t\turl:\"https://cat-fact.herokuapp.com/facts/{{responses.CAT_FACTS.0._id}}\"\n\t\t}\n\t}\n]\n\n\nconst reqWithContext = (req, context) => {\n\n\tconsole.log('context', context)\n\n\tfunction getObjectVal(objPath, obj) {\n\t\treturn objPath.split('.')\n\t\t\t.reduce(function (object, property) {\n\t\t\t\tif (!object)\n\t\t\t\t\treturn undefined;\n\t\t\t\treturn object[property];\n\t\t\t}, obj);\n\t}\n\n\n\tconst valueWithContext = (value, context) => {\n\t\t\n\t\tconst value_result = value.replace(/{{(.*?)}}/g, function (match, context_path) {\n\t\t\tconsole.log(`valueWithContext: match`, {match, context_path, context})\n\t\t\treturn getObjectVal(context_path, context)\n\t\t})\n\t\tconsole.log(`valueWithContext`, {value, value_result})\n\t\treturn value_result\n\t}\n\n\tconst _req = { ...req }\n\tObject.keys(_req)\n\t\t.forEach((key) => {\n\t\t\tconst value = _req[key];\n\t\t\t_req[key] = valueWithContext(value, context);\n\t\t})\n\treturn _req;\n\n\n}\n\nclass EventPanel extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tevents: [],\n\t\t\thistory: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst events_template = MAIN_TEMPLATE\n\t\t// const events_template = TEMPLATE_2_REGISTRATION\n\n\t\tthis.setEvents(JSON.stringify(events_template, '  ', '  '))\n\n\t}\n\n\texecuteEvents = async () =>  {\n\n\t\tconst executeEvent = async (event) => {\n\n\t\t\t\n\t\t\t\t\tconst history = this.state.history\n\t\t\t\t\tconst context = {\n\t\t\t\t\t\tresponses: history.reduce((acc, cur) => {\n\t\t\t\t\t\t\tif (cur.response) {\n\t\t\t\t\t\t\t\tacc[cur.request.id] = cur.response\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn acc\n\t\t\t\t\t\t}, {})\n\t\t\t\t\t}\n\t\t\t\t\tconst newEvent = JSON.parse(JSON.stringify(event))\n\t\t\t\t\tconsole.log(`newEvent cane: `, newEvent)\n\n\t\t\t\t\tnewEvent.req = reqWithContext(newEvent.req, context)\n\n\t\t\t\t\tthis.addHistoryEventRequest(event, newEvent)\n\n\t\t\t\t\tconsole.log(`newEvent`, newEvent)\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet res = await  axios(newEvent.req)\n\t\t\t\t\t\tthis.addHistoryEventResponse(res.data)\n\t\t\t\t\t} catch(err){\n\t\t\t\t\t\tconsole.log(`err`, err)\n\t\t\t\t\t\t//this.addHistoryEventResponse(err.response.data)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\n\n\n\t\t}\n\n\n\t\tconst events = this.getEvents(this.state)\n\t\ttry {\n\t\t\tconsole.log('events String: ', events, typeof events)\n\t\t\tconst eventsArray = JSON.parse(events)\n\t\t\tconsole.log('events ARRAY: ', eventsArray, typeof eventsArray)\n\n\n\t\t\teventsArray.reduce((acc, evt) => {\n\t\t\t\treturn acc.then(() => executeEvent(evt))\n\n\t\t\t}, Promise.resolve())\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t}\n\n\n\n\t}\n\n\tsetEvents(events) {\n\t\tthis.setState({ events })\n\t}\n\tgetEvents() {\n\t\treturn this.state.events\n\t}\n\n\taddHistoryEventRequest(event, newEvent) {\n\t\tthis.setState({\n\t\t\thistory: this.state.history.concat({\n\t\t\t\toriginal: event,\n\t\t\t\trequest: newEvent,\n\t\t\t\tresponse: null\n\t\t\t})\n\t\t})\n\t}\n\taddHistoryEventResponse(response) {\n\t\tconst prevHistory = [...this.state.history]\n\t\tconst lastEvent = prevHistory.pop()\n\t\tlastEvent.response = response\n\t\tthis.setState({\n\t\t\thistory: prevHistory.concat(lastEvent)\n\t\t})\n\t}\n\n\tclear() {\n\t\tthis.setState({ history: [] })\n\t}\n\trender() {\n\t\tconst history = this.state.history;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<JsonEditor\n\t\t\t\t\tvalue={this.state.events}\n\t\t\t\t\tonChange={currentEvents => {\n\t\t\t\t\t\tthis.setEvents(currentEvents)\n\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<button onClick={() => this.executeEvents()} >EXECUTE EVENTS</button>\n\t\t\t\t<button onClick={() => this.clear()} >CLEAR</button>\n\t\t\t\t<EventsHistory history={history} />\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nconst EventReqDisplay = ({ eventHistory }) => {\n\tconst { original, request, response } = eventHistory\n\n\treturn (<div>\n\t\t<div className=\"colLeft\" style={{ float: \"left\", width: \"33%\" }} >\n\t\t\t{original && <PrettyJson json={original} />}\n\t\t</div>\n\t\t<div className=\"colMiddle\" style={{ float: \"left\", width: \"33%\" }} >\n\t\t\t{request && <PrettyJson json={request} />}\n\t\t</div>\n\t\t<div className=\"colRight\" style={{ float: \"left\", width: \"33%\" }} >\n\t\t\t{response && <PrettyJson json={response} />}\n\t\t</div>\n\t\t<div style={{ clear: \"both\" }} ></div>\n\n\t</div>)\n}\nconst EventsHistory = ({ history = [] }) => {\n\treturn (\n\t\t<div>\n\t\t\t{history.map((ev, idx) => {\n\t\t\t\treturn (<div key={idx} >\n\t\t\t\t\t<EventReqDisplay eventHistory={ev} />\n\t\t\t\t</div>)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\n\nconst JsonEditor = ({ value = \"{}\", onChange }) => {\n\tif (typeof window !== 'undefined') {\n\t\tconst valueString = typeof value === \"string\" ? value : JSON.stringify(value, '  ', '  ')\n\t\treturn (\n\t\t\t<span>\n\t\t\t\t<AceEditor\n\t\t\t\t\tmode=\"json\"\n\t\t\t\t\ttheme=\"github\"\n\t\t\t\t\tname={Math.random() + \"\"}\n\t\t\t\t\teditorProps={{ $blockScrolling: true }}\n\t\t\t\t\theight=\"500px\"\n\t\t\t\t\twidth=\"1200px\"\n\t\t\t\t\tvalue={valueString}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t)\n\t}\n\n\treturn null;\n\n}\n\nexport default EventPanel\n","import React from 'react';\nimport EventPanel from './components/EventPanel'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          API Playground\n        </p>\n      </header>\n      <div className=\"App-content\">\n        <p className=\"App-intro\" >\n          This is a playground where you can run api request in sequence. <br />\n          in every request you can specify an <i>id</i> <br />\n          the request is specified in the <i>req</i> property, it use the <a href=\"https://github.com/axios/axios#request-config\">axios format</a> <br/>\n          you can futfill your request using previous request responses using  {\"{{}}\"}. every response is stored in <i>responses.REQ_ID</i>.  <br />\n        </p>\n        <EventPanel />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}